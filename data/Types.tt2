# This is a generated file DO NOT EDIT
# generated by [% generator %] using [% template.name %]
#
# Any changes should be made to [% template_name %]
# followed by running [% generator %]
#
###################################################

package [% package %];

use strict;
use warnings;
use List::MoreUtils qw(any);

require Exporter;

our @ISA = qw(Exporter);
[%
    functions = ['meta_type'];
    FOREACH resource;
        functions.push( "${key}_types" );
    END
%]our @EXPORT = qw( [% functions.join(' ') %] );
[% FOREACH resource %]
{
    my @[% key %] = qw( [% value.join(' ') %] );
    sub [% key %]_types {
        return @[% key %];
    }
}
[% END %]
{
    my %meta_types = (
        [%~ FOREACH building_type IN building_meta.keys.sort %]
        [% building_type %] => [qw(
            [%~ FOREACH building IN building_meta.$building_type %]
            [% building ; END %]
        )],
        [%~ END %]
    );

    sub meta_type {
        my( $type ) = @_;
        return unless $type;
        for my $k ( keys %meta_types ){
            if( any {$_ eq $type} @{$meta_types{$k}} ){
                return $k;
            }
        }
        return;
    }
}
1;

__END__

=head1 NAME

[% package %]

=head1 SYNOPSIS

    use [% package %];

=head1 FUNCTIONS

=over 4
[% FOREACH function IN functions %]
=item [% function %]
[% END %]
=back

=cut
